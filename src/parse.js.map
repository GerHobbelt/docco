{"version":3,"file":"parse.js","sources":["parse.litcoffee"],"names":[],"mappings":"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","sourcesContent":["    _           = require 'underscore'\n    fs          = require 'fs-extra'\n    path        = require 'path'\n    marked      = require 'marked'\n    commander   = require 'commander'\n    highlightjs = require 'highlight.js'\n    path        = require 'path'\n    glob        = require 'glob'\n\nGiven a string of source code, **parse** out each block of prose and the code that\nfollows it — by detecting which is which, line by line — and then create an\nindividual **section** for it. Each section is an object with `docsText` and\n`codeText` properties, and eventually `docsHtml` and `codeHtml` as well.\n\n    module.exports = parse = (source, language, code, config = {}) ->\n      lines    = code.split '\\n'\n      sections = []\n\n      hasCode  = docsText = codeText = ''\n\n      save = ->\n        sections.push {docsText, codeText}\n        hasCode = docsText = codeText = ''\n        return\n\nOur quick-and-dirty implementation of the literate programming style. Simply\ninvert the prose and code relationship on a per-line basis, and then continue as\nnormal below.\n\n      if language.literate\n        isText = maybeCode = yes\n        for line, i in lines\n          lines[i] = if maybeCode and match = /^([ ]{4}|[ ]{0,3}\\t)/.exec line\n            isText = no\n            line[match[0].length..]\n          else if maybeCode = /^\\s*$/.test line\n            if isText then language.symbol else ''\n          else\n            isText = yes\n            language.symbol + ' ' + line\n\n      for line in lines\n        if language.linkMatcher and line.match(language.linkMatcher)\n          LINK_REGEX = /\\((.+)\\)/\n          TEXT_REGEX = /\\[(.+)\\]/\n          links = LINK_REGEX.exec(line)\n          texts = TEXT_REGEX.exec(line)\n          if links? and links.length > 1 and texts? and texts.length > 1\n            link = links[1]\n            text = texts[1]\n            codeText += '<div><img src=\"'+link+'\"></img><p>'+text+'</p></div>' + '\\n'\n          hasCode = yes\n        else if language.sectionMatcher and line.match(language.sectionMatcher)\n          save() if hasCode\n          docsText += (line = line.replace(language.commentMatcher, '')) + '\\n'\n          save() # if /^(---+|===+)$/.test line\n        else if line.match(language.commentMatcher) and not line.match(language.commentFilter)\n          save() if hasCode\n          docsText += (line = line.replace(language.commentMatcher, '')) + '\\n'\n          save() if /^(---+|===+)$/.test line\n        else\n          hasCode = yes\n          codeText += line + '\\n'\n      save()\n\n      sections\n\n"]}