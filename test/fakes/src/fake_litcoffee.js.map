{"version":3,"file":"fake_litcoffee.js","sources":["fakes/src/fake_litcoffee.litcoffee"],"names":[],"mappings":"AA0BI,IAAA;;AAAA,QAAA,GAAW,SAAC,MAAD;AACT,MAAA;EAAA,IAAqB,CAAA,KAAK,MAAA,GAAS,EAAnC;AAAA,WAAO,WAAP;;EACA,IAAqB,CAAA,KAAK,MAAA,GAAS,CAAnC;AAAA,WAAO,OAAP;;EACA,IAAqB,CAAA,KAAK,MAAA,GAAS,CAAnC;AAAA,WAAO,OAAP;;EACA,MAAM,CAAC,QAAP,CAAA;AAEA;OAAS,4BAAT;iBAGE,OAAO,CAAC,GAAR,CAAe,CAAD,GAAG,QAAH,GAAU,CAAC,QAAA,CAAS,CAAT,CAAD,CAAxB;AAHF;;AANS","sourcesContent":["#! /usr/bin/env coffee\n# fizzbuzz.litcoffee\n\nThis is the fizzbuzz test in literate CoffeeScript.\n\n## What should FizzBuzz do?\n\nThe FizzBuzz test should print:\n\n- 'fizz' for every number divisible by 3,\n- 'buzz' for every number divisible by 5,\n- 'fizzbuzz' if the number is divisible by 3 and 5\n- else: just print the number.\n\n## Fun Facts\n\nFizzBuzz is commonly used to interview programmers and test their coding skills.\nOnce the author [@rmetzler](http://github.com/rmetzler) was asked on a job interview\nto write a \"coding test\". He answered by asking if the meant test was FizzBuzz. The interviewer\nsaid yes and made a statement to not test the interviewee. The author later learned he didn't\nget the job, was sad and decided on writing FizzBuzz as a learning tool.\n\n## FizzBuzz in CoffeeScript\n---\n# FizzBuzz in CoffeeScript could look like this:\n\n    fizzbuzz = (number) ->\n      return 'fizzbuzz' if 0 == number % 15\n      return 'buzz'     if 0 == number % 5\n      return 'fizz'     if 0 == number % 3\n      number.toString()\n\n      for x in [1..100]\n\n        # pretty print\n        console.log \"#{x}\\t->\\t#{fizzbuzz x}\"\n"]}