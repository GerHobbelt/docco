{"version":3,"file":"unit-test-getOthers.js","sources":["unit-test-getOthers.litcoffee"],"names":[],"mappings":"AAEI,IAAA;;AAAA,MAAqB,OAAA,CAAQ,MAAR,CAArB,EAAE,mBAAF,EAAU;;AAA4B,MAAA,CAAA;;AAEtC,SAAA,GAAY,OAAA,CAAQ,qBAAR;;AAEZ,QAAA,CAAS,iBAAT,EAA4B,SAAA;EAE1B,EAAA,CAAG,gEAAH,EAAqE,SAAA;AACnE,QAAA;IAAA,kBAAA,GAAqB,OAAA,CAAQ,uCAAR;IACrB,MAAA,GAAS;MACP,OAAA,EAAS,CACP,WADO,EAEP,wBAFO,CADF;MAKP,OAAA,EAAS,KALF;;IAOT,MAAA,GAAS,SAAA,CAAU,WAAV,EAAuB,kBAAvB,EAA2C,MAA3C;IACT,MAAM,CAAC,SAAP,CAAiB,MAAjB,EAAyB;MACvB,aAAA,EAAe,aADQ;MAEvB,kBAAA,EAAoB,sBAFG;KAAzB;EAVmE,CAArE;EAgBA,EAAA,CAAG,mEAAH,EAAwE,SAAA;AACtE,QAAA;IAAA,kBAAA,GAAqB,OAAA,CAAQ,uCAAR;IACrB,MAAA,GAAS;MACP,OAAA,EAAS,CACP,WADO,EAEP,wBAFO,CADF;MAKP,OAAA,EAAS,KALF;;IAOT,MAAA,GAAS,SAAA,CAAU,wBAAV,EAAoC,kBAApC,EAAwD,MAAxD;IACT,MAAM,CAAC,SAAP,CAAiB,MAAjB,EAAyB;MACvB,aAAA,EAAe,gBADQ;MAEvB,kBAAA,EAAoB,kBAFG;KAAzB;EAVsE,CAAxE;EAgBA,EAAA,CAAG,8DAAH,EAAmE,SAAA;AACjE,QAAA;IAAA,kBAAA,GAAqB,OAAA,CAAQ,qCAAR;IACrB,MAAA,GAAS;MACP,OAAA,EAAS,CACP,WADO,EAEP,wBAFO,CADF;MAKP,OAAA,EAAS,IALF;;IAOT,MAAA,GAAS,SAAA,CAAU,WAAV,EAAuB,kBAAvB,EAA2C,MAA3C;IACT,MAAM,CAAC,SAAP,CAAiB,MAAjB,EAAyB;MACvB,aAAA,EAAe,aADQ;MAEvB,kBAAA,EAAoB,kBAFG;KAAzB;EAViE,CAAnE;EAgBA,EAAA,CAAG,iEAAH,EAAsE,SAAA;AACpE,QAAA;IAAA,kBAAA,GAAqB,OAAA,CAAQ,qCAAR;IACrB,MAAA,GAAS;MACP,OAAA,EAAS,CACP,WADO,EAEP,wBAFO,CADF;MAKP,OAAA,EAAS,IALF;;IAOT,MAAA,GAAS,SAAA,CAAU,wBAAV,EAAoC,kBAApC,EAAwD,MAAxD;IACT,MAAM,CAAC,SAAP,CAAiB,MAAjB,EAAyB;MACvB,aAAA,EAAe,aADQ;MAEvB,kBAAA,EAAoB,kBAFG;KAAzB;EAVoE,CAAtE;AAlD0B,CAA5B","sourcesContent":["# This tests if getLanguage is working correctly.\n\n    { assert, should } = require('chai'); should()\n\n    getOthers = require '../../src/getOthers'\n\n    describe 'docco getOthers', () ->\n\n      it 'gets paths to other destination files: top level, unflattened.', () ->\n        informationOnFiles = require './fakes/informationOnFilesUnFlattened'\n        config = {\n          sources: [\n            'README.md'\n            'src/fake_coffee.coffee'\n          ]\n          flatten: false\n        }\n        others = getOthers('README.md', informationOnFiles, config)\n        assert.deepEqual(others, {\n          \"README.html\": \"README.html\"\n          \"fake_coffee.html\": \"src/fake_coffee.html\"\n        })\n        return\n\n      it 'gets paths to other destination files: 1 level down, unflattened.', () ->\n        informationOnFiles = require './fakes/informationOnFilesUnFlattened'\n        config = {\n          sources: [\n            'README.md'\n            'src/fake_coffee.coffee'\n          ]\n          flatten: false\n        }\n        others = getOthers('src/fake_coffee.coffee', informationOnFiles, config)\n        assert.deepEqual(others, {\n          \"README.html\": \"../README.html\"\n          \"fake_coffee.html\": \"fake_coffee.html\"\n        })\n        return\n\n      it 'gets paths to other destination files: top level, flattened.', () ->\n        informationOnFiles = require './fakes/informationOnFilesFlattened'\n        config = {\n          sources: [\n            'README.md'\n            'src/fake_coffee.coffee'\n          ]\n          flatten: true\n        }\n        others = getOthers('README.md', informationOnFiles, config)\n        assert.deepEqual(others, {\n          \"README.html\": \"README.html\"\n          \"fake_coffee.html\": \"fake_coffee.html\"\n        })\n        return\n\n      it 'gets paths to other destination files: 1 level down, flattened.', () ->\n        informationOnFiles = require './fakes/informationOnFilesFlattened'\n        config = {\n          sources: [\n            'README.md'\n            'src/fake_coffee.coffee'\n          ]\n          flatten: true\n        }\n        others = getOthers('src/fake_coffee.coffee', informationOnFiles, config)\n        assert.deepEqual(others, {\n          \"README.html\": \"README.html\"\n          \"fake_coffee.html\": \"fake_coffee.html\"\n        })\n        return\n      return"]}