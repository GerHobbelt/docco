#!/usr/bin/env bash

### Note
#
# Upon execution of this shell script, GitHub-Synchronizer has finished its
# job. *Bravo...!* Since on docas.io environment, master branch will be read
# only, so there'll be nothing in `git diff` and `git diff HEAD`. But always
# remember when invoking docas on a development environment, docas will **not** 
# try to checkout HEAD, but documenting the working directory, which can 
# lead to inconsistency between `gh-pages` and `master` branch. Do it with
# consciousness (or why not `commit` first?).

### Scripting Procedure

#### Phase 0: Preparations

#   1. Stop execution on error.
#   2. Ensure working directory is documentable (a git repo).
#   3. Prepare a temporary working directory (and remove on exit).
#   4. Get sources' HEAD hash, which will be included in commit message.
#   5. List all file (for generating `.files`, a file index).

set -e

if [ $# -eq 0 ]; then

  if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" == "true" ]; then

    remote=$(git remote -v | egrep "origin.*(push)")
    repo=$(echo $remote | grep -P "(?<=\:).*(?=\/)" -o)/$(echo $remote | grep -P "(?<=\/)[^\.]*(?= )" -o)

  else

    echo "Docas is intended to be invoked from a git repository"

  fi

else

  repo=$1

fi

# if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" != "true" ]; then
#   
#   echo "Docas is intended to be invoked from a git repository"
#   exit
# 
# fi

# while [ $# -gt 0 ]
# do
# 
#   case $1 in
# 
#   -h)    hosted=true
#          ;;
#   -*)    echo $0: $1: unrecognized option >&2
#          ;;
#   *)     break
#          ;;
#   esac
# 
#   shift
# 
# done

storage_dir="$(echo $HOME)/docas-repos/$repo" && mkdir -p "$storage_dir" # && cd "$storage_dir" && storage_dir=$(pwd -P)
sources_dir="$storage_dir/master"
sources_git="$sources_dir/.git"

# ## Fetch (or Clone) from GitHub 

if [ -d "$sources_git" ] && [ "$(git --git-dir $sources_git rev-parse --is-inside-work-tree)" = "true" ]; then

  cd "$master"
  git fetch --quiet --force
  git reset --quiet --hard  origin/master

else

  rm -rf "$storage_dir"
  git clone --depth 1 git@github.com:$repo.git "$sources_dir"

fi

working_dir="$(mktemp -d /tmp/repo.$$.XXXXXXXXXX)"
ghpages_dir="$working_dir/ghpages"

# trap "rm -rf $working_dir; exit;" 0 SIGINT SIGTERM

cd $sources_dir
head_hash=$(git rev-parse HEAD | head -c 7)
git ls-tree -r --name-only HEAD > "$working_dir/.all"

#### Phase 1: Checkout gh-pages Branch, List Touched Sources

# Docas will only re-render documents for touched sources, in some scenarios,
# docas treats all files as touched:
#
#   1. `gh-pages` branch does not exist, which could be mis-judged when invoking
#   from a development environment (remote `gh-pages` branch is untracked). Not
#   a problem on docas.io environment.
#   2. No docas commit found from the `gh-pages` branch, which could be caused
#   by first synchronization, or shallow clone.
#   3. `gh-pages` sync found, but could not target according `master` commit,
#   caused by shallow clone.

all_files_are_touched () {

  cp "$working_dir/.all" "$working_dir/.touched"
  echo > "$working_dir/.deleted"
  return

}

#  create `gh-pages` branch if not exist, see: [GitHub instruction]:
#
#   1. Copy sources to `gh-pages` directory.
#   2. Change to `gh-pages` directory.
#   3. Create `gh-pages` branch. 
#   4. Clear git index.
#   5. Remove all files.
#
# In this situation, docas considers all directories are dirty.
# [GitHub instruction]: http://help.github.com/pages/#project_pages_manually 

if [ $(git branch -a | grep origin\/gh-pages | wc -l) = 0 ]; then

  echo "Creating gh-pages branch..."
  cp -R "$sources_dir" "$ghpages_dir" && cd "$ghpages_dir"
  git symbolic-ref HEAD refs/heads/gh-pages
  rm -f .git/index
  git clean --quiet -fdx

  all_files_are_touched

# If there exists a `gh-pages` branch, which means the branch *may* contain docas
# synchronized content. So, docas will:
#
#   1. Copy sources to `ghpages` directory.
#   2. Empty `ghpages` directory, incase of submodules were touched on dev
#   machine, which will cause `unable to rmdir *name of submodule*: Directory
#   not empty` warning and unwanted files being left.
#   3. Switch to branch `gh-pages`.
#   4. Analyze touched files. Touched files are:
#
#     a. When docas can securely locate the synchronized sources commit, then
#     the `diff` between that commit and `HEAD` are touched.
#     b. Otherwise, docas treats all git versioned files are touched.

else

  cp -R "$sources_dir" "$ghpages_dir" && cd "$ghpages_dir"
  rm -rf *
  git checkout --force --quiet -b gh-pages origin/gh-pages > /dev/null

  # In the hosted version, i.e. docas.io, the `gh-pages` repository is up-to-dated
  # (in virtue of) GitHub-Synchronizer. Otherwise, pull `gh-pages` to prevent
  # `non-fast-forward` error.

#   if [ "$hosted" != "true" ]; then
# 
#     echo "Pulling gh-pages branch..."
#     cd $ghpages_dir
#     git pull --quiet
# 
#   fi
 
  synced_docas_commit=$(git log --pretty=oneline | egrep -m 1 -i "^[0-9a-f]+.* docas.*synced.*[0-9a-f]+$")
  synced_ghpages_hash=$(echo "$synced_docas_commit" | head -c 7)
  synced_sources_hash=$(echo "$synced_docas_commit" | tail -c 8 | head -c 7)

  cd $sources_dir
  synced_sources_hash=$(git log --pretty=oneline | egrep -m 1 "^$synced_sources_hash" | head -c 7 | xargs echo)

  echo "$synced_sources_hash | $synced_ghpages_hash"

  if [ "$synced_sources_hash" == "$head_hash" ]; then

    echo "Already synchronized with latest commit."
    exit 0

  fi

  # If we can not securely list all touched files, docas will treat all files as
  # touched.
  if [ -z "$synced_ghpages_hash" ] || [ -z "$synced_sources_hash" ]; then

    echo "gh-pages branch out-of-sync for a long time, rebuilding..."
    all_files_are_touched
    
  # If we can securely list all touched files in the `master` and `gh-pages`
  # branch since last sync, output unique directories into dirty_directories file.
  else

    echo "Docas comitted gh-pages found, synced with $synced_sources_hash"
    cd "$sources_dir"
    git diff --name-status $synced_sources_hash..HEAD > "$working_dir/.git-diff"
    egrep "^(A|M)" "$working_dir/.git-diff" | cut -c 3- > "$working_dir/.touched"
    egrep "^D"     "$working_dir/.git-diff" | cut -c 3- > "$working_dir/.deleted"

  fi

fi

# Get language statustics, all sources, and touched sources from `Linguist HTTP`
# server hosted on local port 4567.

echo > "$working_dir/.all_sources"
echo > "$working_dir/.touched_sources"
curl --silent --output "$working_dir/.statist"         "http://127.0.0.1:4567/statist?path=$sources_dir"
curl --silent --output "$working_dir/.all_sources"     "http://127.0.0.1:4567/sources?path=$sources_dir&list=$working_dir/.all"
curl --silent --output "$working_dir/.touched_sources" "http://127.0.0.1:4567/sources?path=$sources_dir&list=$working_dir/.touched"

#### Phase 3: Generate Cover Page (using Docci)

echo "Generating cover page..."

# Upon this phase, following materials were all ready:
#
#   1. a language statistics named `.statist`, and,
#   2. a list of all recognized sources named `.all_sources`.
#
# Make sure a stylesheet for `index.html` exists. (User modification will be
# honored.)
# 
# Invoke the **docci** command-line program to generate `index.html`.

cd $ghpages_dir
if ! [ -f "stylesheets/index.css" ]; then
 
  mkdir -p "stylesheets"
  cp "/usr/local/lib/docas/resources/index.css" "stylesheets/index.css"

fi

docci -o "$ghpages_dir" "$sources_dir"

#### Phase 4: Generate Documents (using Docco)

echo "Generating documents..."

# Make sure a stylesheet for documents exists. User modification will be
# honored. In case of the stylesheet doesn't exists, copy the default stylesheet
# to the `stylesheets` folder.

cd $ghpages_dir
if ! [ -f "stylesheets/docco.css" ]; then

  mkdir -p "stylesheets"
  cp "/usr/local/lib/docas/resources/docco.css" "stylesheets/docco.css"

fi

# Synchronize Deleted Sources

cd "$ghpages_dir"
cat "$working_dir/.deleted" | while read file; do

  rm -f "${file%.*}.html"

done

# Document all touched sources.
# 
# Since both the GitHub [project page] link structure, i.e.,
# `<user>.github.com/<repo>`, and the CNAME version, e.g.
# `docs.awesomeproject.com` should be supported, relative stylesheet path
# is be used in the HTML sources.
#
# [Project Page]: http://help.github.com/pages/#project_pages_manually

cd "$sources_dir"
cat "$working_dir/.touched_sources" | tr '\n' '\0' | xargs -0 docco -o "$ghpages_dir"

#### Phase 5: Push to Upstream

# Upon this phase, updated cover page (always) and documentations (probably) are
# all ready. It's time to push back to `gh-pages` branch on GitHub.
#
# The [porcelain layer] of git-status is used to count files been created,
# modified, or deleted. Output these numbers to the terminal.
#
# [Porcelain Layer]:
# http://schacon.github.com/git/git.html#_high_level_commands_porcelain

cd "$ghpages_dir"
status=$(git status --porcelain)
echo "Created:$(echo "$status" | egrep "^(\?\?)" | wc -l)"
echo "Altered:$(echo "$status" | egrep "^(M| M)" | wc -l)"
echo "Deleted:$(echo "$status" | egrep "^(D| D)" | wc -l)"

# Following below steps to update gh-pages:
# 
#   1. Synchronize git index with local files,
#   2. commit the `gh-pages` branch, and,
#   3. synchronize the `gh-pages` branch with GitHub remotely.
echo "$status"
echo "Pushing to gh-pages branch on GitHub..."
git add    .
git commit --all --quiet --message "Docas.io synced with $head_hash"
git push         --quiet           origin gh-pages
echo "Branch gh-pages synced with master. Crowd applauds."

# ## Coda

# Pull again to make following synchronization quicker for no need to fetch
# documentations (just pushed) again.

cd "$sources_dir"
git pull --quiet
