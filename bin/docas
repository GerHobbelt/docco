#!/usr/bin/env bash

# ## Introduction
#
# **Docas** is a shell script used by **[Docas.io]** to generate (and
# synchronize) documentation for GitHub repositories. Docas relies on:
#
# 1. **[Git]**, of course!
# 2. **[Docco]**, (tweaked slightly), a quick-and-dirty, hundred-line-long,
# literate-programming-style documentation generator by [Jeremy Ashkenas].
# 3. **[Linguist HTTP]**, a HTTP wrapper for [Linguist].
#
# To use docas as a stand-alone program on your development machine, invoke
# docas from your local git repository.
#
#       $ pwd
#       /path/to/your/repo
#        docas
#
#   [Git]:             http://git-scm.com
#   [Docas.io]:        http://docas.io
#   [Docco]:           http://jashkenas.github.com/docco
#   [Jeremy Ashkenas]: http://jashkenas.github.com
#   [Linguist]:        http://github.com/github/linguist
#   [Linguist HTTP]:   http://github.com/baoshan/linguist_http
#

# ## Scripting Procedure

# ### Step 0: Preparations

# Stop execution on error.

set -e

# Ensure correct invocation pattern.
#
#   * When no argument is given, working directory is used to extract user and
#   repo name which are used to fetch (or clone) from GitHub. Local files are
#   not used to guarantee consistency.

if [ $# -eq 0 ]; then

  if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" == "true" ]; then
 
    addr="$(git remote -v | egrep -m 1 "origin")"
    repo="$(echo $addr  | grep -P "(?<=\:)[^\.]*(?=(\.git| ))" -o)"

  else

    echo -e "
    Docas documents git repository and publish as GitHub pages.

    Usage:\033[36m docas \033[0m              (document current directory) *
    or:   \033[36m docas <user>/<repo>\033[0m (document repository by user and repository name)
    
    * Sources on GitHub will be used instead of local files to guarantee consistency.
    "
    exit

  fi

#   * Else, provided argument should be of `user/repo` pattern, which will be
#   used to fetch (or clone) from GitHub.

else

  repo=$1

fi

# Prepare required directories. Total 4 folders are used to accomplish the
# whole task:
#
#   * `storage` directory, which should be a local non-volatile folder. All
#   fetched (or cloned) repositories are persisted on this location to
#   accelerate following fetches from GitHub. `storage` directory locates at
#   `(home directory)/docas-repos/`.
#   * `sources` directory, holding files of the master branch. `source`
#   directory locates at `user/repo` inside `storage` directory.
#   * `working` directory, holding docas required language statistics, list of
#   (all and touched) sources, and also below `ghpages` directory. Which is a 
#   volatile (temporary) folder and should be removed on exit.
#   * `ghpages` directory, holding generated documentation. `ghpages` directory
#   locates at `ghpages` inside `working` directory.

storage_dir="$(echo $HOME)/docas-repos" && mkdir -p "$storage_dir" # && cd "$storage_dir" && storage_dir=$(pwd -P)
sources_dir="$storage_dir/$repo"
working_dir="$(mktemp -d /tmp/repo.$$.XXXXXXXXXX)" # && trap "rm -rf "$working_dir"; exit;" 0 SIGINT SIGTERM
ghpages_dir="$working_dir/ghpages"

# ### Step 1: Fetch (or Clone) from GitHub

# If `sources_dir` is a git repository already, then fetch from upstream. The
# `--hard` option is feeded into `git reset` to handle repository (or user)
# rename scenarios.

sources_git="$sources_dir/.git"
if [ -d "$sources_git" ] && [ "$(git --git-dir $sources_git rev-parse --is-inside-work-tree)" == "true" ]; then

  echo -n "Fetching from GitHub...               "
  cd "$sources_dir"
  git remote prune origin > /dev/null
  git pull --quiet --force
  echo "DONE"

# Else, before clone the repository, clear the content of `storage_dir`. Shallow
# clone is not used to save bandwidth and improve speed. Because a file browser
# needs deep log to correctly show modification history. Otherwise, we could use
# `--depth 1` shallow clone.

else

  rm -rf "$storage_dir"
  git clone --quiet "git@github.com:$repo.git" "$sources_dir"

fi

# ### Step 2: Checkout (or Generate) gh-pages Branch, List Touched Files

# Docas will only re-render documents for touched sources, in some scenarios,
# docas treats all files as touched:
#
#   1. `gh-pages` branch does not exist, which could be mis-judged when invoking
#   from a development environment (remote `gh-pages` branch is untracked). Not
#   a problem on docas.io environment.
#   2. No docas commit found from the `gh-pages` branch, which could be caused
#   by first synchronization, or shallow clone.
#   3. `gh-pages` sync found, but could not target according `master` commit,
#   caused by shallow clone.

all_files_are_touched () {
  cp "$working_dir/.all" "$working_dir/.touched"
  echo > "$working_dir/.deleted"
  return
}

# Get `HEAD` commit hash, and list all git versioned files.

cd "$sources_dir"
head_hash="$(git rev-parse HEAD | head -c 7)"
git ls-tree -r --name-only HEAD > "$working_dir/.all"

# Create `gh-pages` branch if not exist, see: [GitHub instruction]:
#
#   1. Copy sources to `gh-pages` directory.
#   2. Change to `gh-pages` directory.
#   3. Create `gh-pages` branch. 
#   4. Clear git index.
#   5. Remove all files.
#
# In this situation, docas considers all directories are dirty.
# [GitHub instruction]: http://help.github.com/pages/#project_pages_manually 

if [ "$(git branch -a | grep origin\/gh-pages | wc -l)" -eq 0 ]; then

  echo -n "Creating gh-pages branch...           "
  cp -R "$sources_dir" "$ghpages_dir" && cd "$ghpages_dir"
  git symbolic-ref HEAD refs/heads/gh-pages
  rm -f .git/index
  git clean --quiet -fdx
  all_files_are_touched
  echo "DONE"

# If there exists a `gh-pages` branch, which means the branch *may* contain docas
# synchronized content. So, docas will:
#
#   1. Copy sources to `ghpages` directory.
#   2. Empty `ghpages` directory, incase of submodules were touched on dev
#   machine, which will cause `unable to rmdir *name of submodule*: Directory
#   not empty` warning and unwanted files being left.
#   3. Switch to branch `gh-pages`.
#   4. Analyze touched files. Touched files are:
#
#     a. When docas can securely locate the synchronized sources commit, then
#     the `diff` between that commit and `HEAD` are touched.
#     b. Otherwise, docas treats all git versioned files are touched.

else

  cp -R "$sources_dir" "$ghpages_dir" && cd "$ghpages_dir" && rm -rf *
  git checkout --force --quiet -b gh-pages origin/gh-pages > /dev/null
  echo -n "Finding Docas Commits Hashes...       "
  synced_docas_commit=$(git log --pretty=oneline | egrep -m 1 -i "^[0-9a-f]+.* docas.*synced.*[0-9a-f]+$" | xargs echo)
  synced_ghpages_hash=$(echo "$synced_docas_commit" | head -c 7)
  synced_sources_hash=$(echo "$synced_docas_commit" | tail -c 8 | head -c 7)
  cd "$sources_dir"
  synced_sources_hash=$(git log --pretty=oneline | egrep -m 1 "^$synced_sources_hash" | head -c 7 | xargs echo)
  echo "DONE"

  # In case of `synced_ghpages_hash` is an empty string, `synced_sources_hash` equals head_hash.
  if [ "$synced_ghpages_hash" ] && [ "$synced_sources_hash" == "$head_hash" ]; then

    echo "Already synched with latest commit."
    exit 0

  fi

  # If we can not securely list all touched files, docas will treat all files as
  # touched.
  if [ -z "$synced_ghpages_hash" ] || [ -z "$synced_sources_hash" ]; then

    echo "Out-of-sync for a long time, rebuilding..."
    all_files_are_touched
    
  # If we can securely list all touched files in the `master` and `gh-pages`
  # branch since last sync, output unique directories into dirty_directories file.
  else

    echo "Previously synced with $synced_sources_hash"
    cd "$sources_dir"
    git diff --name-status $synced_sources_hash..HEAD > "$working_dir/.git-diff"
    egrep "^(A|M)" "$working_dir/.git-diff" | cut -c 3- > "$working_dir/.touched"
    egrep "^D"     "$working_dir/.git-diff" | cut -c 3- > "$working_dir/.deleted"

  fi

fi

# ### Step 3: Language Analysis, List Touched Sources

# Get language statistics, all and touched sources from `Linguist HTTP` server
# listening local port 4567.

echo -n "Calling Linguist HTTP @ port 4567...  "
touch "$working_dir/.all_sources"
touch "$working_dir/.touched_sources"
curl --silent --output "$working_dir/.statist"         "http://127.0.0.1:4567/statist?path=$sources_dir"
curl --silent --output "$working_dir/.all_sources"     "http://127.0.0.1:4567/sources?path=$sources_dir&list=$working_dir/.all"
curl --silent --output "$working_dir/.touched_sources" "http://127.0.0.1:4567/sources?path=$sources_dir&list=$working_dir/.touched"
echo "DONE"

# ### Step 4: Synchronize Documents (using Docco)

echo -n "Generating Documents...               "

# * Synchronize deleted sources. Delete the according documents for all deleted
# sources. Take care of hidden file without an extension.

cd "$ghpages_dir"
cat "$working_dir/.deleted" | while read file; do
  deleted_document=${file%.*}
  if [ -z $deleted_document ]; then deleted_document=$file; fi
  rm -f "$deleted_document.html"
done

 
# * Generate documents using docco.

cd "$sources_dir"
cat "$working_dir/.touched_sources" | tr '\n' '\0' | xargs -0 docco -r $(echo $repo | grep -P "(?<=/)([^\/]*)" -o) -o "$ghpages_dir" > /dev/null
echo "DONE"

# ### Step 5: Generate Cover Page using Docci

# Update file and folder indexes for touched file and folder using **[doccx]**.
#
# Doccx will generated `docas.index` in `docas/tree` folder for all folders list
# in the follow input:
#
#   1. `.touched`
#   2. `.deleted`
#
# [doccx]: doccx.html

echo -n "Generating File & Folder Indexes...   "
doccx -s "$sources_dir" -w "$working_dir"
echo "DONE"

# Upon this phase, following materials were all ready:
#
#   1. a language statistics named `.statist`, and,
#   2. a list of all recognized sources named `.all_sources`.
#
# Do:
#
#   1. Make sure a stylesheet for `index.html` exists.
#   2. Invoke the **[docci]** command-line program to generate `index.html`.
#
# [docci]: docci.html

echo -n "Generating Repository Cover Page...   "
cd "$ghpages_dir" && mkdir -p stylesheets
cp /usr/local/lib/docas/resources/index.css stylesheets/index.css
docci -o "$ghpages_dir" "$sources_dir"
echo "DONE"

# ### Step 6: Static File Handling

# * Make sure front-end required stylesheet exist.

cd "$ghpages_dir"
mkdir -p stylesheets
cp /usr/local/lib/docas/resources/docco.css stylesheets/docco.css
mkdir -p stylesheets/fonts
cp /usr/local/lib/docas/resources/fonts/* stylesheets/fonts

# * Make sure frond-end required scripts exist.

mkdir -p "javascript"
cp "/usr/local/lib/docas/vendor/jquery.min.js" "javascript/jquery.min.js"
cp "/usr/local/lib/docas/vendor/filesize.js" "javascript/filesize.js"
cp "/usr/local/lib/docas/vendor/moment.min.js" "javascript/moment.min.js"
cp "/usr/local/lib/docas/vendor/underscore-min.js" "javascript/underscore-min.js"
cp "/usr/local/lib/docas/lib/langstats.js" "javascript/langstats.js"
cp "/usr/local/lib/docas/lib/file_browser.js" "javascript/file_browser.js"

# ### Step 7: Push to Upstream

# Upon this phase, updated cover page (always) and documentations (probably) are
# all ready. It's time to push back to `gh-pages` branch on GitHub.
#
# The [porcelain layer] of git-status is used to count files been created,
# modified, or deleted. Output these numbers to the terminal.
#
# [Porcelain Layer]:
# http://schacon.github.com/git/git.html#_high_level_commands_porcelain

cd "$ghpages_dir"
status="$(git status --porcelain)"
if [ "$verbose" = "on" ]; then
  echo "Created:$(echo "$status" | egrep "^(\?\?)" | wc -l)"
  echo "Altered:$(echo "$status" | egrep "^(M| M)" | wc -l)"
  echo "Deleted:$(echo "$status" | egrep "^(D| D)" | wc -l)"
fi

# Following below steps to update gh-pages:
# 
#   1. Synchronize git index with local files,
#   2. Commit the `gh-pages` branch, and,
#   3. Synchronize the `gh-pages` branch with GitHub remotely.

echo -n "Pushing to gh-pages on GitHub...      "
git add .
git commit --all --quiet --message "Docas.io synced with $head_hash"
git push --quiet origin gh-pages
echo "DONE. Crowd applauds."

# ### Step 8: Coda

# Since if the `gh-pages` branch of the `sources_dir` is not up-to-date, next
# synchronization need to pull `gh-pages` first (before documenting, commit,
# and push).
#
# Ensure `sources_dir` is up-to-date by:
# 
#   1. Checkout `master` branch of `ghpages_dir`.
#   2. Delete local gh-pages branch *(less trouble for next synchronization)*.
#   3. Overriding `sources_dir` using `ghpages_dir`.
#
# Why not have a cup of coffee, Docas?

cd "$ghpages_dir" && git checkout --force --quiet master && git branch -D gh-pages > /dev/null
rm -rf "$sources_dir" && cp -r "$ghpages_dir" "$sources_dir"

# <img style="float:left" src="https://a248.e.akamai.net/assets.github.com/images/modules/about_page/octocat.png?1334862345"></img>
# <img id="mug" style="display:none;float:left;width:174px;height:174px" src="http://origin.kaboodle.com/hi/img/b/0/0/17f/a/AAAAC-kxKTAAAAAAAX-s1A.jpg"></img>
# <input id="coffee" style="float:left" type="button" value="YES, PLEASE!"></input>
# <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
# <script>
# $('#coffee').click(function(){$('#mug').css('display', 'block'); $(this).remove();})
# </script>
