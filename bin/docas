#!/usr/bin/env bash

# Docas help you document your git repository automatically. It relies on:
#
#   *  [Docco][Docco], a quick and dirty, hundred-line-long, 
#      literate-programming style documentation generator, original by
#      Jeremy Ashkenas.
#
#   *  Docci, generate an index.html cover page for your git repository. The
#      cover page contains the repository's recent commit history, a
#      statistics of languages and slocs, and a file browser for navigation.
#
# Docas can be used stand alone on the developer's machine, which will:
#
#   1. Clone the git (current on GitHub only) repository into a temporary
#      directory.
#
#   2. (Optional) Create the gh-pages branch on GitHub if not exists.
#
#   3. Generate the cover page using docci.
#
#   4. Documente (documentable) sources for each directory.
#
#   5. Push to the remote gh-pages branch.
#
# ## Hosted Version ##
#
# Actually, for most of developers who want a quick and dirty mechanism for
# documentation synchronization, please goto [Docas.io](http://docas.io), an
# documentation service which synchronize the documents on gh-pages branch in
# real time when you make any commit. As simple as adding docas as your
# collaborator.
#
# ### Command-line usage: ###
#
#     docas username/repository



# ## Script Procedure ##
#
# ### Setup Phase ###
#
# Halt the execution immediately when encountering any non-zero return value.
set -e

# Ensure enough arguments are given.
if [ $# -lt 1 ]; then
  echo -e "\nUsage: docas <username>/<repository>\n"
  exit
fi

# Separate input arguments by slash into user name and repository name.
user=$(echo $1 | cut -d'/' -f1)
repo=$(echo $1 | cut -d'/' -f2)

# Prepare working directory, create a temporary directory to store the
# repository's master branch and also the generated gh-pages branch.
tempdir=$(mktemp -d /tmp/repo.$$.XXXXXXXXXX)

# Remove the temp directory on exit, interruption, and termination.
# trap "rm -rf $tempdir; exit" 0 SIGINT SIGTERM

# Resolve link to actual directory. This will keep the shell script's directory
# and node.js' path.resolve (which will provide the actual referenced path) in
# consistency.
cd $tempdir
tempdir=$(pwd -P)

# ### Download the Repository
#
# (Shallow) clone the GitHub repository to master directory.
# Keep the current commit hash of the master branch, which will be included in
# the commit subject line of gh-pages branch to indicate a successful
# synchronization.

echo "Cloning git@github.com:$user/$repo.git..."
git clone -q --depth=1 git@github.com:$user/$repo.git "$tempdir/master"
cd $tempdir/master
commit=$(git rev-parse HEAD | cut -c1-10)



# ### Ensure gh-pages Branch Exists.

# Test if gh-pages branch exists.
if [ $(git branch -a | grep origin\/gh-pages | wc -l) = 0 ]; then

  echo "Creating gh-pages branch..."

  # Duplicate master directory to gh-pages directory.
  cp -R $tempdir/master $tempdir/gh-pages

  # Change to gh-pages directory.
  cd $tempdir/gh-pages

  # Create gh-pages branch. 
  git symbolic-ref HEAD refs/heads/gh-pages > /dev/null
  
  # Clear git index.
  rm .git/index
  
  # Remove files.
  git clean -fdx > /dev/null
  
  # Make index
  # cp /usr/local/lib/docas/resources/docas.html index.html

  # List all versioned files.
  cd $tempdir/master
  git ls-tree -r --name-only HEAD \
    | while read file; do dirname $file; done \
    | uniq > $tempdir/changed_directories_full_path
  # | sed 's?^?'"$tempdir/master"'/?' > $tempdir/changed_directories_full_path

# If there exists an gh-pages, which means the gh-pages may contain docas
# synchronized content. So, docas will:
#
#   1. Duplicate master directory to gh-pages directory.
#
#   2. Setup gh-pages directory to track remote gh-pages branch.
#
#   3. Analyze the directories which have been touched. Sources in these
#   directories will be regenerated. Modified directories contains:
#
#      * Modified directories of the master branch, plus
#      * Modified directories of the gh-pages branch.
#      
#      Touched files 
#      All files in the touched directories will be re-generated since the
#      original docco implementation use the file list to generate the jump to
#      links, which might be broken if some source renamed/removed.
else

  cp -R $tempdir/master $tempdir/gh-pages
  git --git-dir=$tempdir/gh-pages/.git --work-tree=$tempdir/gh-pages checkout -q gh-pages
 
  synced_ghpages_hash=$(git --git-dir=$tempdir/gh-pages/.git log --pretty=oneline \
    | egrep -m 1 -i "docas .* [0-9a-f]{10}$" \
    | head -c 10)

  synced_master_hash=$(git --git-dir=$tempdir/gh-pages/.git log --pretty=oneline \
    | egrep -m 1 -i "docas .* [0-9a-f]{10}$" \
    | tail -c 11 \
    | head -c 10)

  synced_master_hash=$(git --git-dir=$tempdir/master/.git log --pretty=oneline \
    | egrep -m 1 "^$synced_master_hash" \
    | head -c 10 \
    | xargs echo)

  echo "$synced_master_hash | $synced_ghpages_hash"

  if [ -z $synced_ghpages_hash ] || [ -z $synced_master_hash ]; then
   
    git --git-dir=$tempdir/master/.git ls-tree -r --name-only HEAD \
      | while read file; do echo $(dirname $file); done \
      | sort | uniq > $tempdir/changed_directories_full_path

     echo "gh-pages branch out-of sync for a long time, rebuilding..."
 
  # If we can securely get all touched files in the master and gh-pages branch
  # (the shallow clone contains the log), we sort out the unique touched
  # directories into changed_directories_full_path file.
  else

    echo "Found docas comitted gh-pages, synced with $synced_master_hash"

    git --git-dir=$tempdir/gh-pages/.git diff --name-only $synced_ghpages_hash..HEAD \
      | while read file; do dirname $file; done \
      | uniq > $tempdir/changed_directories

    git --git-dir=$tempdir/master/.git diff --name-only $synced_master_hash..HEAD \
      | while read file; do dirname $file; done \
      | uniq >> $tempdir/changed_directories

    cat $tempdir/changed_directories \
      | sort -u > $tempdir/changed_directories_full_path

  fi

fi

echo Changed directories:
cat $tempdir/changed_directories_full_path

# If no file of the master or the gh-pages branch was changed, exit the
# program with notification. Nothing needs be done further. Neither the cover
# page nor any document needs be re-generated.
if [ $(cat $tempdir/changed_directories_full_path | wc -l) -eq 0 ]; then 
  echo "No file has been touched. Are you kidding?"
  exit
fi

# Keep the path name of the master directory into a local variable, which will
# be used to remove the prefix from the source list.
masterdir=$tempdir/master
masterdirlength=${#masterdir}+1

# ### Generate Cover Page using Docci
#
# Before calling the docci command line, we should prepare:
#   1. a language statistics file, and also
#   2. a list of all recognized sources.
cd /usr/local/lib/docas/vendor/linguist
bundle exec linguist $tempdir/master > $tempdir/stat
find $tempdir/master -type f \
  | xargs bundle exec source_only \
  | while read file; do echo ${file:$masterdirlength}; done > $tempdir/list

echo "Linguist Recognized Sources:"
cat $tempdir/list

cd $tempdir

# Used on SaaS version, by leveraging
# [linguist_http](http://github.com/baoshan/linguist_http).
# wget -O "$tempdir/stat" "http://127.0.0.1:4567/stat$tempdir"
# wget -O "$tempdir/list" "http://127.0.0.1:4567/list$tempdir"

# Make sure a stylesheet for index.html exists. User modification will be kept.

# In case of the stylesheet doesn't exists.
# Copy the default stylesheet to the folder.
if ! [ -f $tempdir/gh-pages/stylesheets/index.css ]; then

  mkdir -p $tempdir/gh-pages/stylesheets
  cp /usr/local/lib/docas/resources/index.css \
    $tempdir/gh-pages/stylesheets/index.css

fi

# Invoke the docci command-line to generate index.html for master directory.
docci -c "/$repo/stylesheets/index.css" -o $tempdir/gh-pages $tempdir/master

#### Phase 4: Generate Documents (using Docco)

# 
echo "Generating documents..."

##### 1: Prepare Docco Stylesheet
#
# Make sure a stylesheet for documents exists. User modification will be kept.
# In case of the stylesheet doesn't exists. Copy the default stylesheet to the
# `stylesheets` folder.
if ! [ -f $tempdir/gh-pages/stylesheets/docco.css ]; then
  mkdir -p $tempdir/gh-pages/stylesheets
  cp /usr/local/lib/docas/resources/docco.css $tempdir/gh-pages/stylesheets/docco.css
fi

##### 2: Clear Touched Directories
#
# Remove all files generated by docco in the touched directories. A `generator`
# meta tag in the docco template is used as a signagure to identify docco
# generated documents.
cat $tempdir/changed_directories_full_path | while read dir; do
  if [ -d $tempdir/gh-pages/$dir ]; then
    find $tempdir/gh-pages/$dir -depth 1 -type f -print0 \
      | xargs -0 grep -liZ '<meta name="generator" content="docco.*">' \
      | xargs -0 rm 
  fi
done

##### 3: Generate Docuemnts
#
# Process the sources for each directory, so the **JUMP TO** section of each
# document will contain links to sibling documents only.
#
# Following the [project pages] link structure, generated documents reference
# `/<repo>/stylesheets/docco.css` in the HTML sources.
#
# [Project Pages]: http://help.github.com/pages/#project_pages_manually
cat $tempdir/changed_directories_full_path | while read dir; do
  if [ $dir = '.' ]; then match="^[^/]+$"; else match="^$dir/[^/]+$"; fi
  egrep $match $tempdir/list \
    | while read file; do echo "$tempdir/master/$file"; done \
    | xargs docco -c "/$repo/stylesheets/docco.css" -o $tempdir/gh-pages/$dir # > /dev/null  
done

#### Phase 5: Synchronize with GitHub

# Docas will *only* touch the gh-pages branch when necessary.
#
# Use the [porcelain layer] of git-status to count files been created, modified,
# or deleted. Inform the user these statistics numbers.
#
# [Porcelain Layer]:
# http://schacon.github.com/git/git.html#_high_level_commands_porcelain
status=$(git --git-dir=$tempdir/gh-pages/.git --work-tree=$tempdir/gh-pages status --porcelain)

echo "Created:$(echo "$status" | egrep "^(A| A)" | wc -l)"
echo "Altered:$(echo "$status" | egrep "^(M| M)" | wc -l)"
echo "Deleted:$(echo "$status" | egrep "^(D| D)" | wc -l)"

# If there exists any file created, modified, or deleted, then:
# 
#   1. Synchronize git index with local files,
#   2. commit the gh-pages branch, and,
#   3. synchronize the gh-pages branch with GitHub remotely.
if [ $(echo "$status" | wc -l) -gt 0 ]; then
  echo "Synchronizing GitHub pages remotely..."
  git --git-dir=$tempdir/gh-pages/.git --work-tree=$tempdir/gh-pages add .
  git --git-dir=$tempdir/gh-pages/.git --work-tree=$tempdir/gh-pages commit -qam "Docas synced with $commit"
  git --git-dir=$tempdir/gh-pages/.git --work-tree=$tempdir/gh-pages push -q origin gh-pages
  echo "http://$user.github.com/$repo is now up-to-date. Crowd applauds."

# Nothing to do when no file was created, modified, or deleted. The gh-pages
# branch is in-sync with the master branch already.
else
  echo "http://$user.github.com/$repo doesn't need to sync. Code harder."
fi
