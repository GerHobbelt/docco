#!/usr/bin/env bash

# Docas help you document your git repository automatically. It relies on:
#
#   *  [Docco][Docco], a quick and dirty, hundred-line-long, 
#      literate-programming style documentation generator, original by
#      Jeremy Ashkenas.
#
#   *  Docci, generate an index.html cover page for your git repository. The
#      cover page contains the repository's recent commit history, a
#      statistics of languages and slocs, and a file browser for navigation.
#
# Docas can be used stand alone on the developer's machine, which will:
#
#   1. Clone the git (current on GitHub only) repository into a temporary
#      directory.
#
#   2. (Optional) Create the gh-pages branch on GitHub if not exists.
#
#   3. Generate the cover page using docci.
#
#   4. Documente (documentable) sources for each directory.
#
#   5. Push to the remote gh-pages branch.
#
# ## Hosted Version ##
#
# Actually, for most of developers who want a quick and dirty mechanism for
# documentation synchronization, please goto [Docas.io](http://docas.io), an
# documentation service which synchronize the documents on gh-pages branch in
# real time when you make any commit. As simple as adding docas as your
# collaborator.
#
# ### Command-line usage: ###
#
#     docas username/repository



# ## Script Procedure ##
#
# ### Setup Phase ###
#
# Halt the execution immediately when encountering any non-zero return value.
set -e

# Ensure enough arguments are given.
if [ $# -lt 1 ]; then
  echo -e "\nUsage: docas <username>/<repository>\n"
  exit
fi

# Separate input arguments by slash into user name and repository name.
username=$(echo $1 | cut -d'/' -f1)
repository=$(echo $1 | cut -d'/' -f2)

# Prepare working directory, create a temporary directory to store the
# repository's master branch and also the generated gh-pages branch.
tempdir=$(mktemp -d /tmp/repo.$$.XXXXXXXXXX)

# Remove the temp directory on exit, interruption, and termination.
trap "rm -rf $tempdir; exit" 0 SIGINT SIGTERM

# Resolve link to actual directory. This will keep the shell script's directory
# and node.js' path.resolve (which will provide the actual referenced path) in
# consistency.
cd $tempdir
tempdir=$(pwd -P)

# ### Download the Repository ###

echo "Cloning git@github.com:$username/$repository.git..."

# Shallow clone the GitHub repository to master directory.
git clone -q --depth=1 git@github.com:$username/$repository.git "$tempdir/master"

# Keep the current commit hash.
cd $tempdir/master
commithash=$(git rev-parse HEAD | cut -c1-10)



# ### Ensure gh-pages Branch Exists. ###

# Test if gh-pages branch exists.
if [ $(git branch -a | grep origin\/gh-pages | wc -l) = 0 ]; then

  echo "Creating gh-pages branch..."

  # Duplicate master directory to gh-pages directory.
  cp -R $tempdir/master $tempdir/gh-pages

  # Change to gh-pages directory.
  cd $tempdir/gh-pages

  # Create gh-pages branch. 
  git symbolic-ref HEAD refs/heads/gh-pages > /dev/null
  
  # Clear git index.
  rm .git/index
  
  # Remove files.
  git clean -fdx > /dev/null
  
  # Make index
  # cp /usr/local/lib/docas/resources/docas.html index.html

  # List all versioned files.
  cd $tempdir/master
  git ls-tree -r --name-only HEAD \
    | while read file; do dirname $file; done \
    | uniq > $tempdir/changed_directories_full_path
  # | sed 's?^?'"$tempdir/master"'/?' > $tempdir/changed_directories_full_path

else

  # Duplicate master directory to gh-pages directory.
  cp -R $tempdir/master $tempdir/gh-pages

  # Change directory to gh-pages.
  cd $tempdir/gh-pages

  # Setup gh-pages branch to track remote branch gh-pages from origin.
  git checkout -q -b gh-pages origin/gh-pages > /dev/null

  # ### Analyze the Directories need be Re-Generated

  # The directories of gh-pages needs be re-generated are the aggregation of:
  #
  #   1. Modified directories of the master branch, plus
  #   2. Modified directories of the gh-pages branch.
  #
  # All files in the above directories should be re-generated since some jump
  # links of sibling documents may be broken.

  cd $tempdir/gh-pages

  synced_ghpages_hash=$(git log --pretty=oneline \
    | egrep -m 1 "Docas .* [0-9a-f]{10}$" \
    | head -c 10)

  synced_master_hash=$(git log --pretty=format:'%s' \
    | egrep -m 1 "Docas .* [0-9a-f]{10}$" \
    | tail -c 11 \
    | head -c 10)

  if [ -z $synced_ghpages_hash ]; then
   
    echo x1

    cd $tempdir/master

    git ls-tree -r --name-only HEAD \
      | while read file; do dirname $file; done \
      | uniq > $tempdir/changed_directories_full_path
      # | sed 's?^?'"$tempdir/master"'/?'
  
  else

    echo "Found docas comitted gh-pages, synced with $synced_master_hash"

    git diff --name-only $synced_ghpages_hash..HEAD \
      | while read file; do dirname $file; done \
      | uniq > $tempdir/changed_directories

    cd $tempdir/master

    git diff --name-only $synced_master_hash..HEAD \
      | while read file; do dirname $file; done \
      | uniq >> $tempdir/changed_directories

    cat $tempdir/changed_directories \
      | uniq > $tempdir/changed_directories_full_path
      # | sed 's?^?'"$tempdir/master"'/?' > $tempdir/changed_directories_full_path

  fi

fi

# If no file of the master or the gh-pages branch was changed, exit the
# program with notification. Nothing needs be done further. Neither the cover
# page nor any document needs be re-generated.
if [ $(cat $tempdir/changed_directories_full_path | wc -l) -eq 0 ]; then 
  echo "No file has been touched. Are you kidding?"
  exit
fi

echo Changed directories:

cat $tempdir/changed_directories_full_path

# Keep the path name of the master directory into a local variable, which will
# be used to remove the prefix from the source list.
masterdir=$tempdir/master
masterdirlength=${#masterdir}+1


# ### Generate Cover Page using Docci ###

# Used on stand-alone version.
cd /usr/local/lib/docas/vendor/linguist
bundle exec linguist $tempdir/master                        > $tempdir/stat
find $tempdir/master -type f \
  | xargs bundle exec source_only \
  | while read file; do echo ${file:$masterdirlength}; done > $tempdir/list

echo LIST
cat $tempdir/list

cd $tempdir

# Used on SaaS version, by leveraging
# [linguist_http](http://github.com/baoshan/linguist_http).
# wget -O "$tempdir/stat" "http://127.0.0.1:4567/stat$tempdir"
# wget -O "$tempdir/list" "http://127.0.0.1:4567/list$tempdir"

# Make sure a stylesheet for index.html exists. User modification will be kept.

# In case of the stylesheet doesn't exists.
if ! [ -f $tempdir/gh-pages/stylesheets/index.css ]; then

  # Create the stylesheets folder if not exists.
  mkdir -p $tempdir/gh-pages/stylesheets

  # Copy the default stylesheet to the folder.
  cp /usr/local/lib/docas/resources/index.css \
    $tempdir/gh-pages/stylesheets/index.css

fi

# Invoke the docci command-line to generate index.html for master directory.
docci -c "/$repository/stylesheets/index.css" -o $tempdir/gh-pages $tempdir/master


# ### Generate Documents using Docco ###

echo "Generating documents..."

# Make sure a stylesheet for documents exists. User modification will be kept.


# In case of the stylesheet doesn't exists.
if ! [ -f $tempdir/gh-pages/stylesheets/docco.css ]; then

  # Create the stylesheets folder if not exists.
  mkdir -p $tempdir/gh-pages/stylesheets

  # Copy the default stylesheet to the folder.
  cp /usr/local/lib/docas/resources/docco.css \
    $tempdir/gh-pages/stylesheets/docco.css

fi

# Remove all the files generated by docco previously.
# find $tempdir/gh-pages -type f \
#  -exec grep -l -i '<meta name="generator" content="docco.*">' '{}' + \
#  | xargs rm

cat $tempdir/changed_directories_full_path | while read dir; do

  echo $tempdir/gh-pages/$dir
  if [ -d $tempdir/gh-pages/$dir ]; then
    find $tempdir/gh-pages/$dir -type f -print0 \
      | xargs -0 grep -l -i '<meta name="generator" content="docco.*">' \
      | xargs rm
  fi
done


# cat $tempdir/list

# Process the sources for each directory (exclude hidden directory).

cd $tempdir/master

cat $tempdir/changed_directories_full_path | while read dir; do
# find $tempdir/master -type d -not -path '*/.*/*' -not -name '.*' | while read dir; do

  # echo $dir

  # Files directly belong to that directory will be processed together.
  # The link of the stylesheet will be '/<repository>/stylesheets/docco.css'.
  egrep "^$dir/[^\/]+$" $tempdir/list \
    | xargs docco -c "/$repository/stylesheets/docco.css" -o \
    $tempdir/gh-pages/$dir # > /dev/null

  # ${dir:$masterdirlength}

done



# ### Synchronize gh-pages Branch with GitHub

# Add any created or modified files to the index.
cd $tempdir/gh-pages
git add .

# Find out the status of the gh-pages branch using the porcelain layer.
gitstatus=$(git status --porcelain)

# Print modification log.
echo "Created:$(git status --porcelain | egrep "^(A| A)" | wc -l)"
echo "Altered:$(git status --porcelain | egrep "^(M| M)" | wc -l)"
echo "Deleted:$(git status --porcelain | egrep "^(D| D)" | wc -l)"

# If there exists any file created, modified, or deleted, then:
# 
#   1. Delete missing files from the git index (automatically done with step 2)
#   2. Commit the gh-pages branch.
#   3. Push to the gh-pages branch at GitHub.
if [ $(git status --porcelain | wc -l) -gt 0 ]; then

  echo "Synchronizing GitHub pages remotely..."
  git commit -qam "Docas dropped in. Synced with $commithash"
  git push -q origin gh-pages
  echo http://$username.github.com/$repository is now up-to-date. \
    \(crowd applauds\)

# Nothing to do when no file being created, modified, or deleted. The gh-pages
# branch is synchronized with the master branch already.
else

  echo Nothing happened to http://$username.github.com/$repository. \
    Keep working hard...

fi
