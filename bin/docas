#!/usr/bin/env bash

### Prerequist

# Upon execution of this shell script, GitHub-Synchronizer has finished its
# job. (Bravo...!) Since on docas.io environment, master branch will be read
# only, so there'll be nothing in `git diff` and `git diff HEAD`. But always
# remember when invoking docas on a development environment, docas will not 
# try to checkout HEAD, but documenting the working directory, which can 
# lead to inconsistency between `gh-pages` and `master` branch. Do it with
# consciousness (or why not `commit` first?).

### Scripting Procedure

#### Phase 0: Preparations

#   1. Stop execution on error.
#   2. Ensure working directory is documentable (a git repo).
#   3. Parse arguments into user and repo variable,
#   4. Prepare a temporary working directory (and remove on exit).

set -e

if [ $(git rev-parse --is-inside-work-tree) != 'true' ]; then
  
  echo "Docas want to be invoked from git repositories."
  exit

fi

tmpdir=$(mktemp -d /tmp/repo.$$.XXXXXXXXXX)
# trap "rm -rf $tmpdir; exit" 0 SIGINT SIGTERM
master_srcdir=$(pwd)
ghpage_srcdir=$tmpdir/ghpage

cd "$master_srcdir"
head=$(git rev-parse HEAD | head -c 7)
git ls-tree -r --name-only HEAD > "$tmpdir/.allfiles"

#### Phase 1: Checkout gh-pages Branch, List Touched Sources

# Docas will only re-render touched sources, in the following scenarios, docas
# consider all files are touched:
#
#   1. `gh-pages` does not exist, or,
#   2. No docas commit found from the `gh-pages` branch, or,
#   3. `gh-pages` sync found, but could not found according `master` commit.
#
# Situation 2 can be caused by first synchronization, or shallow clone; while
# situation 3 can only be caused by shallow clone.
#
all_directories_are_dirty () {

  cd "$master_srcdir"
  cp "$tmpdir/.allfiles" "$tmpdir/.touched"
  echo > "$tmpdir/.deleted"
  return

}

#  create `gh-pages` branch if not exist, see: [GitHub instruction]:
#
#   1. Duplicate `master` directory to `gh-pages` directory.
#   2. Change to `gh-pages` directory.
#   3. Create `gh-pages` branch. 
#   4. Clear git index.
#   5. Remove all files.
#
# In this situation, docas considers all directories are dirty.
# [GitHub instruction]: http://help.github.com/pages/#project_pages_manually 

if [ $(git branch -a | grep origin\/gh-pages | wc -l) = 0 ]; then

  echo "Creating gh-pages branch..."
  echo $master_srcdir $ghpage_srcdir
  cp -R $master_srcdir $ghpage_srcdir
  cd $ghpage_srcdir
  git symbolic-ref HEAD refs/heads/gh-pages # > /dev/null
  rm -f .git/index
  git clean --quiet -fdx # > /dev/null
  rm -rf *
  all_directories_are_dirty

# If there exists a `gh-pages` branch, which means the branch *may* contain docas
# synchronized content. So, docas will:
#
#   1. Duplicate `master` directory to `gh-pages` directory.
#   2. Empty `gh-pages` incase of submodules exists (unable to rmdir warning). 
#   3. Checkout `gh-pages` branch in `gh-pages` directory.
#   4. Stop tracking `master` branch to decrease possibility of concurrency.
#   3. Analyze dirty directories. Sources in these directories will be
#   regenerated. Dirty directories are:
#
#      * Modified directories of the `master` branch, plus
#      * Modified directories of the `gh-pages` branch.
#      
#   All sources in the touched directories will be re-generated since the
#   *JUMP TO* links of sibling documents needs be synchronized.
else

  cp -R . "$ghpage_srcdir"
  echo "XXXX"
  rm -rf $ghpage_srcdir/*
  find .
  echo "XXXX"
  cd "$ghpage_srcdir"
  git checkout --force --quiet -b gh-pages origin/gh-pages
  git branch -D master
  find .
 
  latest_sync=$(git log --pretty=oneline \
    | egrep -m 1 -i "docas .* [0-9a-f]{7}$")

  synced_ghpages_hash=$(echo "$latest_sync" | head -c 7)

  synced_master_hash=$(echo "$latest_sync" | tail -c 8 | head -c 7)

  cd "$master_srcdir"
  synced_master_hash=$(git log --pretty=oneline \
    | egrep -m 1 "^$synced_master_hash" \
    | head -c 7 \
    | xargs echo)

  echo "$synced_master_hash | $synced_ghpages_hash"

  # If we can not securely list all touched files, then docas treat all
  # as dirty directories.
  if [ -z $synced_ghpages_hash ] || [ -z $synced_master_hash ]; then

    echo "gh-pages branch out-of sync for a long time, rebuilding..."
    all_directories_are_dirty
    
  # If we can securely list all touched files in the `master` and `gh-pages`
  # branch since last sync, output unique directories into dirty_directories file.
  else

    echo "Found docas comitted gh-pages, synced with $synced_master_hash"
    cd "$master_srcdir"
    git diff --name-status $synced_master_hash..HEAD > $tmpdir/.git-diff
    egrep "^(A|M)" $tmpdir/.git-diff | cut -c 3- > $tmpdir/.touched
    egrep "^D" $tmpdir/.git-diff | cut -c 3- > $tmpdir/.deleted

  fi

fi

curl --silent --output $tmpdir/.stats "http://127.0.0.1:4567/stats?path=$master_srcdir"
curl --silent --output $tmpdir/.all_source "http://127.0.0.1:4567/touched?path=$master_srcdir&list=$tmpdir/.allfiles"
curl --silent --output $tmpdir/.touched_source "http://127.0.0.1:4567/touched?path=$master_srcdir&list=$tmpdir/.touched"

#### Phase 3: Generate Cover Page (using Docci)

echo "Generating cover page..."

# Upon this phase, following materials were all ready:
#
#   1. a language statistics named `.stats`, and,
#   2. a list of all recognized sources named `.all_source`.
#
# Make sure a stylesheet for `index.html` exists. User modification will be
# honored.

cd "$ghpage_srcdir"
if ! [ -f stylesheets/index.css ]; then
 
  mkdir -p stylesheets
  cp /usr/local/lib/docas/resources/index.css stylesheets/index.css

fi

# Invoke the **docci** command-line to generate `index.html`.

docci -o "$ghpage_srcdir" "$master_srcdir"

#### Phase 4: Generate Documents (using Docco)

echo "Generating documents..."

##### 4.1: Prepare Docco Stylesheet

# Make sure a stylesheet for documents exists. User modification will be
# honored. In case of the stylesheet doesn't exists, copy the default stylesheet
# to the `stylesheets` folder.

cd "$ghpage_srcdir"
if ! [ -f stylesheets/docco.css ]; then

  mkdir -p stylesheets
  cp /usr/local/lib/docas/resources/docco.css stylesheets/docco.css

fi

##### 4.2: Synchronize Deleted Sources

cd "$ghpage_srcdir"
cat $tmpdir/.deleted | while read file; do

  rm -f "${file%.*}.html"

done

##### 4.3: Generate Documents

# Document all touched sources.
# 
# Since both the GitHub [project page] link structure, i.e.,
# `<user>.github.com/<repo>`, and the CNAME version, e.g.
# `docs.awesomeproject.com` should be supported, relative stylesheet path
# is be used in the HTML sources.
#
# [Project Page]: http://help.github.com/pages/#project_pages_manually

cd "$master_srcdir"
cat "$tmpdir/.touched_source" | tr '\n' '\0' | xargs -0 docco -o "$ghpage_srcdir"

#### Phase 5: Push to Upstream

# Upon this phase, updated cover page (always) and documentations (probably) are
# all ready. It's time to push back to `gh-pages` branch on GitHub.
#
# The [porcelain layer] of git-status is used to count files been created,
# modified, or deleted. Output these numbers to the terminal.
#
# [Porcelain Layer]:
# http://schacon.github.com/git/git.html#_high_level_commands_porcelain

cd "$ghpage_srcdir"
status=$(git status --porcelain)
echo $status
echo "Created:$(echo "$status" | egrep "^(\?\?)" | wc -l)"
echo "Altered:$(echo "$status" | egrep "^(M| M)" | wc -l)"
echo "Deleted:$(echo "$status" | egrep "^(D| D)" | wc -l)"

# Following below steps to update gh-pages:
# 
#   1. Synchronize git index with local files,
#   2. commit the `gh-pages` branch, and,
#   3. synchronize the `gh-pages` branch with GitHub remotely.

echo "Pushing to gh-pages branch on GitHub..."
git add    --all
echo added
git commit --all --quiet --message "Docas synced with $head"
echo committed
git push         --quiet --force    origin gh-pages
echo "Branch gh-pages synced with master. Crowd applauds."
