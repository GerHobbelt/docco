#!/usr/bin/env bash

# Command-line usage:
# docas <username> <repository>

# Exit when encounters a non-zero return value.
set -e

# Ensure enough arguments are given.
if [ $# -lt 2 ]; then

  echo -e "\nUsage: docas <username> <repository>\n"
  exit

fi


# Prepare working directory.
# --------------------------

# Create temp directory to hold repository.
tempdir=$(mktemp -d /tmp/repo.$$.XXXXXXXXXX)

# Remove the temp directory on exit, interruption, and termination.
trap "rm -rf $tempdir; exit" 0 SIGINT SIGTERM

# Change directory to temp directory.
cd $tempdir


# Fetch the repository.
# ---------------------

echo "Fetching git@github.com:$1/$2.git..."

# Shallow clone the GitHub repository to master directory.
git clone -q --depth=1 git@github.com:$1/$2.git master


# Ensure gh-pages branch exists.
# ------------------------------

# Change directory to master directory.
cd master

# Test if gh-pages branch exists.
if [ `git branch -a | grep origin\/gh-pages | wc -l` = 0 ]; then

  echo "Branch gh-pages not found, creating..."

  # Change to temp directory.
  cd ..

  # Duplicate master directory to gh-pages directory.
  cp -R master gh-pages

  # Change to gh-pages directory.
  cd gh-pages

  # Create gh-pages branch. 
  git symbolic-ref HEAD refs/heads/gh-pages > /dev/null
  
  # Clear git index.
  rm .git/index
  
  # Remove files.
  git clean -fdx > /dev/null
  
  # Make index
  cp /usr/local/lib/docas/resources/docas.html index.html

else

  # Change to temp directory. 
  cd ..

  # Duplicate master directory to gh-pages directory.
  cp -R master gh-pages

  # Change directory to gh-pages.
  cd gh-pages

  # Setup gh-pages branch to track remote branch gh-pages from origin.
  git checkout -q -b gh-pages origin/gh-pages > /dev/null

fi


# Make sure default stylesheet exists. User modification will be kept.
# --------------------------------------------------------------------

# Change directory to temporary directory.
cd ..

# In case of the stylesheet doesn't exists.
if ! [ -f gh-pages/stylesheets/docco.css ]; then

  # Create the stylesheets folder if not exists.
  mkdir -p gh-pages/stylesheets

  # Copy the default stylesheet by Jeremy to the folder.
  cp /usr/local/lib/docas/resources/docco.css gh-pages/stylesheets/docco.css

fi


# Synchronize gh-pages Branch
# ---------------------------

echo "Synchronizing locally..."

# Change directory to gh-pages.
cd gh-pages

# Remove all the files in the gh-pages directory which is generated by docco.
find . -type f -exec grep -l -i '<meta name="generator" content="docco.*">' '{}' ';' | xargs rm

# Change directory to master.
cd ../master

# Process the sources for each directory (exclude hidden directory).
find . -type d -not -path '*/.*/*' -not -name '.*' | while read dir; do

  # Files directly belong to that directory will be processed together.
  # The link of the stylesheet will be '/<repository>/stylesheets/docco.css'.
  find $dir -maxdepth 1 -type f -exec docco -c "/$2/stylesheets/docco.css" -o ../gh-pages/$dir '{}' + > /dev/null

done


# Update gh-pages Branch at GitHub
# --------------------------------

# Change directory to gh-pages.
cd ../gh-pages

# Add any new or modified files to the index.
git add .

# Provide general statistics.
echo "Created:$(git status --porcelain | egrep "^(A| A)" | wc -l)"
echo "Altered:$(git status --porcelain | egrep "^(M| M)" | wc -l)"
echo "Deleted:$(git status --porcelain | egrep "^(D| D)" | wc -l)"

# If any file is new, modified, or deleted.
if [ $(git status --porcelain | wc -l) -gt 0 ]; then

  echo "Pushing to gh-pages branch at GitHub."

  # Commit the gh-pages branch.
  # Auto include deleted files.
  git commit -q -a -m "Synced at $(date)."

  # Push to origin/gh-pages branch at GitHub.
  git push -q origin gh-pages

  echo "Successed!"

else

  echo "No changes made to documentable sources."

fi
